import logging
import os
from datetime import datetime, date, time
import io
import psycopg2
from psycopg2 import sql
from PIL import Image, ImageDraw, ImageFont
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes
)
from dateutil.relativedelta import relativedelta
from dateutil.relativedelta import relativedelta

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
MAIN_MENU, GET_NAME, GET_BIRTHDATE, EDIT_PROFILE, EDIT_NAME, EDIT_BIRTHDATE, EDIT_LIFE_EXPECTANCY = range(7)

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_PORT = os.environ.get('DB_PORT', '5432')
DB_NAME = os.environ.get('DB_NAME', 'weekly_reminder')
DB_USER = os.environ.get('DB_USER', 'postgres')
DB_PASSWORD = os.environ.get('DB_PASSWORD', 'postgres')

class DatabaseConnection:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    def __init__(self):
        self.conn = None
        
    def __enter__(self):
        try:
            self.conn = psycopg2.connect(
                host=DB_HOST,
                port=DB_PORT,
                dbname=DB_NAME,
                user=DB_USER,
                password=DB_PASSWORD
            )
            return self.conn
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
            
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.conn:
            self.conn.close()
            
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
    return DatabaseConnection()

def init_db():
    try:
        with get_db_connection() as conn:
            conn.autocommit = True
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
                cursor.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'users'
                    );
                """)
                result = cursor.fetchone()
                table_exists = result[0] if result is not None else False
                
                if not table_exists:
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
                    cursor.execute("""
                        CREATE TABLE users (
                            user_id BIGINT PRIMARY KEY,
                            name TEXT NOT NULL,
                            birthdate DATE NOT NULL,
                            life_expectancy INTEGER DEFAULT 90,
                            notifications_enabled BOOLEAN DEFAULT TRUE
                        )
                    """)
                    logger.info("–¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ life_expectancy
                    cursor.execute("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.columns 
                            WHERE table_name = 'users' AND column_name = 'life_expectancy'
                        );
                    """)
                    result = cursor.fetchone()
                    column_exists = result[0] if result is not None else False
                    
                    if not column_exists:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É life_expectancy, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        cursor.execute("ALTER TABLE users ADD COLUMN life_expectancy INTEGER DEFAULT 90")
                        logger.info("–ö–æ–ª–æ–Ω–∫–∞ life_expectancy –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É users")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ notifications_enabled
                    cursor.execute("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.columns 
                            WHERE table_name = 'users' AND column_name = 'notifications_enabled'
                        );
                    """)
                    result = cursor.fetchone()
                    column_exists = result[0] if result is not None else False
                    
                    if not column_exists:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É notifications_enabled, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        cursor.execute("ALTER TABLE users ADD COLUMN notifications_enabled BOOLEAN DEFAULT TRUE")
                        logger.info("–ö–æ–ª–æ–Ω–∫–∞ notifications_enabled –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É users")
            
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

try:
    init_db()
except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏"), KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∂–∏—Ç—ã—Ö –Ω–µ–¥–µ–ª—å. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    return MAIN_MENU

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    text = update.message.text
    
    if text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return GET_NAME
    elif text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_statistics(update, context)
    elif text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏":
        return await show_life_calendar(update, context)
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        return await edit_profile(update, context)
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text(
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏—Ç—ã—Ö –Ω–µ–¥–µ–ª—å. "
            "–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 21:00 —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∂–∏–∑–Ω–∏.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    return GET_BIRTHDATE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
        reply_markup=get_main_menu_keyboard()
    )
    return MAIN_MENU

async def get_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        birthdate = datetime.strptime(update.message.text, "%d.%m.%Y").date()
        if birthdate > date.today():
            await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
            return GET_BIRTHDATE
            
        user_id = update.message.from_user.id
        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (user_id,))
                    user_exists = cursor.fetchone() is not None
                    
                    if user_exists:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        cursor.execute(
                            "UPDATE users SET name = %s, birthdate = %s, life_expectancy = %s WHERE user_id = %s",
                            (context.user_data['name'], birthdate, 90, user_id)
                        )
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        cursor.execute(
                            "INSERT INTO users (user_id, name, birthdate, life_expectancy, notifications_enabled) VALUES (%s, %s, %s, %s, %s)",
                            (user_id, context.user_data['name'], birthdate, 90, True)
                        )
                
                conn.commit()
            
            await update.message.reply_text(
                "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 21:00 —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì:")
        return GET_BIRTHDATE

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    today = date.today()
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT name, birthdate, life_expectancy FROM users WHERE user_id = %s", 
                    (user_id,)
                )
                user_data = cursor.fetchone()
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –≤ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
            
        name, birthdate, life_expectancy = user_data
        # birthdate —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º date –≤ PostgreSQL
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º dateutil –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        delta = relativedelta(today, birthdate)
        days = (today - birthdate).days
        weeks = days // 7
        
        # –¢–æ—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –º–µ—Å—è—Ü–µ–≤ –∏ –ª–µ—Ç
        years = delta.years
        months = delta.years * 12 + delta.months
        
        # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤–∏—Å–æ–∫–æ—Å–Ω—ã—Ö –ª–µ—Ç
        remaining_delta = relativedelta(years=life_expectancy) - delta
        remaining_years = remaining_delta.years
        remaining_months = remaining_delta.years * 12 + remaining_delta.months
        
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –∏ –Ω–µ–¥–µ–ª—å
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–∏—Å–æ–∫–æ—Å–Ω—ã–µ –≥–æ–¥—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ 365.25 –¥–Ω–µ–π –≤ –≥–æ–¥—É)
        remaining_days = int(remaining_years * 365.25)
        remaining_weeks = remaining_days // 7
        
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}:\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate.strftime('%d.%m.%Y')}\n"
            f"‚è± –ü—Ä–æ–∂–∏—Ç–æ –¥–Ω–µ–π: {days}\n"
            f"üìÜ –ü—Ä–æ–∂–∏—Ç–æ –Ω–µ–¥–µ–ª—å: {weeks}\n"
            f"üóì –ü—Ä–æ–∂–∏—Ç–æ –º–µ—Å—è—Ü–µ–≤: {months}\n"
            f"üéÇ –ü—Ä–æ–∂–∏—Ç–æ –ª–µ—Ç: {years}\n\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {life_expectancy} –ª–µ—Ç\n"
            f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {remaining_years} –ª–µ—Ç\n"
            f"üìÖ –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ {remaining_days} –¥–Ω–µ–π\n"
            f"üìÜ –ò–ª–∏ {remaining_weeks} –Ω–µ–¥–µ–ª—å\n"
            f"üóì –ò–ª–∏ {remaining_months} –º–µ—Å—è—Ü–µ–≤",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
        
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = update.message.from_user.id
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT name, birthdate, life_expectancy, notifications_enabled FROM users WHERE user_id = %s", 
                    (user_id,)
                )
                user_data = cursor.fetchone()
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –≤ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
            
        name, birthdate, life_expectancy, notifications_enabled = user_data
        # birthdate —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º date –≤ PostgreSQL
        
        notifications_status = "–í–∫–ª—é—á–µ–Ω—ã ‚úÖ" if notifications_enabled else "–û—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
        
        keyboard = [
            [KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), KeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")],
            [KeyboardButton("‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏")],
            [KeyboardButton("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")],
            [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate.strftime('%d.%m.%Y')}\n"
            f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {life_expectancy} –ª–µ—Ç\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}\n\n"
            f"–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=reply_markup
        )
        return EDIT_PROFILE
        
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
MANAGE_NOTIFICATIONS, DELETE_PROFILE, CUSTOM_LIFE_EXPECTANCY = range(7, 10)

async def edit_profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    text = update.message.text
    
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:")
        return EDIT_NAME
    elif text == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return EDIT_BIRTHDATE
    elif text == "‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏":
        keyboard = [
            [KeyboardButton("70 –ª–µ—Ç"), KeyboardButton("80 –ª–µ—Ç"), KeyboardButton("90 –ª–µ—Ç")],
            [KeyboardButton("–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:",
            reply_markup=reply_markup
        )
        return EDIT_LIFE_EXPECTANCY
    elif text == "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏":
        user_id = update.message.from_user.id
        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT notifications_enabled FROM users WHERE user_id = %s", 
                        (user_id,)
                    )
                    result = cursor.fetchone()
                    notifications_enabled = result[0] if result else True
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
                    keyboard = [[
                        KeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notifications_enabled else "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    ], [KeyboardButton("üîô –ù–∞–∑–∞–¥")]]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    status = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                    await update.message.reply_text(
                        f"–°–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
                        reply_markup=reply_markup
                    )
                    return MANAGE_NOTIFICATIONS
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        keyboard = [
            [KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=reply_markup
        )
        return DELETE_PROFILE
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        return EDIT_PROFILE

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    new_name = update.message.text
    user_id = update.message.from_user.id
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "UPDATE users SET name = %s WHERE user_id = %s",
                    (new_name, user_id)
                )
            conn.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
        
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

async def edit_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        new_birthdate = datetime.strptime(update.message.text, "%d.%m.%Y").date()
        if new_birthdate > date.today():
            await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
            return EDIT_BIRTHDATE
            
        user_id = update.message.from_user.id
        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "UPDATE users SET birthdate = %s WHERE user_id = %s",
                        (new_birthdate, user_id)
                    )
                conn.commit()
            
            await update.message.reply_text(
                f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_birthdate.strftime('%d.%m.%Y')}!",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
            
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì:")
        return EDIT_BIRTHDATE

async def edit_life_expectancy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await edit_profile(update, context)
    
    if text == "–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 50 –¥–æ 120):",
            reply_markup=ReplyKeyboardRemove()
        )
        return CUSTOM_LIFE_EXPECTANCY
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (70, 80 –∏–ª–∏ 90)
        new_life_expectancy = int(text.split()[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if new_life_expectancy not in [70, 80, 90]:
            keyboard = [
                [KeyboardButton("70 –ª–µ—Ç"), KeyboardButton("80 –ª–µ—Ç"), KeyboardButton("90 –ª–µ—Ç")],
                [KeyboardButton("–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")],
                [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–ª–∏ '–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'.",
                reply_markup=reply_markup
            )
            return EDIT_LIFE_EXPECTANCY
            
        user_id = update.message.from_user.id
        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "UPDATE users SET life_expectancy = %s WHERE user_id = %s",
                        (new_life_expectancy, user_id)
                    )
                conn.commit()
            
            await update.message.reply_text(
                f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_life_expectancy} –ª–µ—Ç!",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
            
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU

    except (ValueError, IndexError):
        keyboard = [
            [KeyboardButton("70 –ª–µ—Ç"), KeyboardButton("80 –ª–µ—Ç"), KeyboardButton("90 –ª–µ—Ç")],
            [KeyboardButton("–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–ª–∏ '–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'.",
            reply_markup=reply_markup
        )
        return EDIT_LIFE_EXPECTANCY

async def custom_life_expectancy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏"""
    try:
        new_life_expectancy = int(update.message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if new_life_expectancy < 50 or new_life_expectancy > 120:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 50 –¥–æ 120 –ª–µ—Ç:"
            )
            return CUSTOM_LIFE_EXPECTANCY
            
        user_id = update.message.from_user.id
        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "UPDATE users SET life_expectancy = %s WHERE user_id = %s",
                        (new_life_expectancy, user_id)
                    )
                conn.commit()
            
            await update.message.reply_text(
                f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_life_expectancy} –ª–µ—Ç!",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
            
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 50 –¥–æ 120:"
        )
        return CUSTOM_LIFE_EXPECTANCY

def generate_life_calendar(birthdate: date, life_expectancy: int) -> io.BytesIO:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∂–∏–∑–Ω–∏"""
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    CELL_SIZE = 10  # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    WEEKS_PER_ROW = 52  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –≤ –≥–æ–¥—É (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
    YEARS = life_expectancy  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç (–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
    
    # –û—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥–ø–∏—Å–µ–π
    MARGIN_LEFT = 50  # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –ª–µ—Ç
    MARGIN_TOP = 50   # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –Ω–µ–¥–µ–ª—å
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    width = MARGIN_LEFT + WEEKS_PER_ROW * CELL_SIZE + 20  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
    height = MARGIN_TOP + YEARS * CELL_SIZE + 20  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    image = Image.new('RGB', (width, height), color='white')
    draw = ImageDraw.Draw(image)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        font = ImageFont.truetype("Arial", 12)
    except IOError:
        font = ImageFont.load_default()
    
    # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    draw.text((MARGIN_LEFT, 10), "–ù–µ–¥–µ–ª–∏ ‚Äî‚Äî>", fill="black", font=font)
    draw.text((10, MARGIN_TOP), "–í\n–æ\n–∑\n—Ä\n–∞\n—Å\n—Ç\n\n|", fill="black", font=font)
    draw.text((10, MARGIN_TOP + 100), "‚Üì", fill="black", font=font)
    
    # –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–µ–¥–µ–ª—å (–ø–æ 5)
    for i in range(0, WEEKS_PER_ROW + 1, 5):
        x = MARGIN_LEFT + i * CELL_SIZE
        draw.text((x, 30), str(i), fill="black", font=font)
    
    # –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –ª–µ—Ç (–ø–æ 5)
    for i in range(0, YEARS + 1, 5):
        y = MARGIN_TOP + i * CELL_SIZE
        draw.text((20, y), str(i), fill="black", font=font)
    
    # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∂–∏—Ç—ã–µ –Ω–µ–¥–µ–ª–∏
    today = date.today()
    total_weeks_lived = (today - birthdate).days // 7
    
    for year in range(YEARS):
        for week in range(WEEKS_PER_ROW):
            x = MARGIN_LEFT + week * CELL_SIZE
            y = MARGIN_TOP + year * CELL_SIZE
            
            # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            current_week_index = year * WEEKS_PER_ROW + week
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —è—á–µ–π–∫–∏
            if current_week_index < total_weeks_lived:
                # –ü—Ä–æ–∂–∏—Ç–∞—è –Ω–µ–¥–µ–ª—è - –∫—Ä–∞—Å–Ω–∞—è
                cell_color = 'red'
            else:
                # –ë—É–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è - –∫–æ–Ω—Ç—É—Ä
                cell_color = 'lightgray'
            
            # –†–∏—Å—É–µ–º —è—á–µ–π–∫—É
            draw.rectangle(
                [(x, y), (x + CELL_SIZE - 1, y + CELL_SIZE - 1)],
                outline='gray',
                fill=cell_color if current_week_index < total_weeks_lived else None
            )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞
    
    return img_byte_arr

async def show_life_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT name, birthdate, life_expectancy FROM users WHERE user_id = %s", 
                    (user_id,)
                )
                user_data = cursor.fetchone()
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –≤ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
            
        name, birthdate, life_expectancy = user_data
        # birthdate —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º date –≤ PostgreSQL
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏
        calendar_image = generate_life_calendar(birthdate, life_expectancy)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await update.message.reply_photo(
            photo=calendar_image,
            caption=f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏ –¥–ª—è {name}\n\n–ö–∞–∂–¥—ã–π –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç - –ø—Ä–æ–∂–∏—Ç–∞—è –Ω–µ–¥–µ–ª—è.\n–í—Å–µ–≥–æ –ø—Ä–æ–∂–∏—Ç–æ: {(date.today() - birthdate).days // 7} –Ω–µ–¥–µ–ª—å.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
        
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

async def send_weekly_update(context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT user_id, name, birthdate, life_expectancy, notifications_enabled FROM users")
                users = cursor.fetchall()
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return

    for user_data in users:
        user_id, name, birthdate, life_expectancy, notifications_enabled = user_data
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–∫–ª—é—á–∏–≤—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not notifications_enabled:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({name}), —Ç.–∫. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            continue
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º dateutil –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            delta = relativedelta(today, birthdate)
            weeks = (today - birthdate).days // 7
            years = delta.years
            
            # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤–∏—Å–æ–∫–æ—Å–Ω—ã—Ö –ª–µ—Ç
            remaining_delta = relativedelta(years=life_expectancy) - delta
            remaining_years = remaining_delta.years
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üìÖ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}! –¢—ã –ø—Ä–æ–∂–∏–ª {weeks} –Ω–µ–¥–µ–ª—å. –ü—Ä–∏ –æ–∂–∏–¥–∞–µ–º–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏ {life_expectancy} –ª–µ—Ç, —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {remaining_years} –ª–µ—Ç."
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏
            calendar_image = generate_life_calendar(birthdate, life_expectancy)
            await context.bot.send_photo(
                chat_id=user_id,
                photo=calendar_image,
                caption=f"üìÖ –¢–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏. –ö–∞–∂–¥—ã–π –∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç - –ø—Ä–æ–∂–∏—Ç–∞—è –Ω–µ–¥–µ–ª—è."
            )
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        except telegram.error.TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

async def manage_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await edit_profile(update, context)
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                new_state = text == "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                
                cursor.execute(
                    "UPDATE users SET notifications_enabled = %s WHERE user_id = %s",
                    (new_state, user_id)
                )
            conn.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ {status}!",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
        
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU

async def delete_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        return MAIN_MENU
    
    if text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        try:
            with get_db_connection() as conn:
                with conn.cursor() as cursor:
                    cursor.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
                conn.commit()
            
            await update.message.reply_text(
                "‚úÖ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
            
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return MAIN_MENU
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
    keyboard = [
        [KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
        reply_markup=reply_markup
    )
    return DELETE_PROFILE

def main() -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.environ.get('BOT_TOKEN')
    if not bot_token:
        logger.critical("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return
    
    application = Application.builder().token(bot_token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_birthdate)],
            EDIT_PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_profile_handler)],
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
            EDIT_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_birthdate)],
            EDIT_LIFE_EXPECTANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_life_expectancy)],
            CUSTOM_LIFE_EXPECTANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_life_expectancy)],
            MANAGE_NOTIFICATIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, manage_notifications)],
            DELETE_PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_profile)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º (day_of_week=6)
    application.job_queue.run_daily(send_weekly_update, time=time(21, 0), days=(6,))
    application.run_polling()

if __name__ == "__main__":
    main()